using Microsoft.EntityFrameworkCore;


public class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }
     
    public DbSet<ClubModel> Clubs { get; set; }
    public DbSet<UserProfile> UserProfiles { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        modelBuilder.Entity<ClubModel>(entity =>
    {
        entity.HasKey(e => e.ClubID); // Explicitly setting ClubId as the primary key

        entity.ToTable("clubs");
        entity.Property(e => e.ClubID).ValueGeneratedOnAdd(); // Assuming ClubId is auto-generated
        entity.Property(e => e.ClubName)
            .IsRequired()
            .HasMaxLength(255);

        entity.Property(e => e.Description)
            .HasMaxLength(1000);

        entity.Property(e => e.OwnerUserId)
            .IsRequired();

        entity.Property(e => e.CreationDate).IsRequired();
        
        });

          modelBuilder.Entity<UserProfile>(entity =>
{
    entity.HasKey(e => e.IdentityUserID); // Adjusted to match the actual primary key column name

    entity.ToTable("user_profiles"); // Map to the actual table name in the database

    // Since IdentityUserID is of type GUID, you may not need ValueGeneratedOnAdd() unless it's auto-generated by the database
    entity.Property(e => e.IdentityUserID)
          .IsRequired(); // Ensure this is marked as required if it's a non-nullable field in your database

    entity.Property(e => e.Username)
          .IsRequired()
          .HasMaxLength(255);

    // Configure other properties as needed
});

    }
}

