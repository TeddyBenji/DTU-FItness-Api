using Microsoft.EntityFrameworkCore;
using DtuFitnessApi.Models;


public class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }
     
    public DbSet<ClubModel> Clubs { get; set; }
    public DbSet<UserProfile> UserProfiles { get; set; }
    public DbSet<ClubMember> ClubMembers { get; set; }
    public DbSet<ExerciseLog> ExerciseLogs { get; set; }
    public DbSet<ExerciseModel> Exercises { get; set; }
    public DbSet<Metric> Metrics { get; set; }
    public DbSet<ExerciseMetric> ExerciseMetrics { get; set; }



    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        modelBuilder.Entity<ClubModel>(entity =>
    {
        entity.HasKey(e => e.ClubID); // Explicitly setting ClubId as the primary key

        entity.ToTable("clubs");
        entity.Property(e => e.ClubID).ValueGeneratedOnAdd(); // Assuming ClubId is auto-generated
        entity.Property(e => e.ClubName)
            .IsRequired()
            .HasMaxLength(255);

        entity.Property(e => e.Description)
            .HasMaxLength(1000);

        entity.Property(e => e.OwnerUserId)
            .IsRequired();

        entity.Property(e => e.CreationDate).IsRequired();
        
        });

          modelBuilder.Entity<UserProfile>(entity =>
{
    entity.HasKey(e => e.IdentityUserID); // Adjusted to match the actual primary key column name

    entity.ToTable("user_profiles"); // Map to the actual table name in the database

    // Since IdentityUserID is of type GUID, you may not need ValueGeneratedOnAdd() unless it's auto-generated by the database
    entity.Property(e => e.IdentityUserID)
          .IsRequired(); // Ensure this is marked as required if it's a non-nullable field in your database

    entity.Property(e => e.Username)
          .IsRequired()
          .HasMaxLength(255);

    // Configure other properties as needed
});

    modelBuilder.Entity<ClubMember>(entity =>
        {
            entity.HasKey(e => e.ClubMemberId); // Primary key for the ClubMember entity

            // Assuming ClubId and MemberId are the foreign keys in the ClubMember entity
            entity.HasOne(cm => cm.Club) // Navigation property in ClubMember
                .WithMany(c => c.ClubMembers) // If you have a corresponding collection property in ClubModel
                .HasForeignKey(cm => cm.ClubId); // Foreign key

            entity.HasOne(cm => cm.UserProfile) // Navigation property in ClubMember
                .WithMany(up => up.ClubMembers) // If you have a corresponding collection property in UserProfile
                .HasForeignKey(cm => cm.MemberId); // Foreign key

            // Map to the actual table name in the database if it's different
            entity.ToTable("clubmembers");

            // Additional configurations...
        });

        modelBuilder.Entity<ExerciseLog>(entity =>
    {
        entity.ToTable("exercise_logs");
        entity.HasKey(e => e.LogID);
        entity.Property(e => e.ExerciseDate).IsRequired();
        entity.HasOne(d => d.UserProfile).WithMany(p => p.ExerciseLogs).HasForeignKey(d => d.UserID);
        entity.HasOne(d => d.ExerciseModel) // instead of d.Exercise
          .WithMany(p => p.ExerciseLogs)
          .HasForeignKey(d => d.ExerciseID);
    });

    modelBuilder.Entity<ExerciseModel>(entity =>
    {
        entity.ToTable("exercises");
        entity.HasKey(e => e.ExerciseID);
        entity.Property(e => e.Name).IsRequired().HasMaxLength(255);
    });

    modelBuilder.Entity<Metric>(entity =>
    {
        entity.ToTable("metrics");
        entity.HasKey(e => e.MetricID);
        entity.Property(e => e.Name).IsRequired().HasMaxLength(255);
    });

    modelBuilder.Entity<ExerciseMetric>(entity =>
{
    entity.ToTable("exercise_metrics"); // Update to use the correct table name
    entity.HasKey(e => e.ExerciseMetricID);
    entity.Property(e => e.Value).IsRequired();
    
    entity.HasOne(d => d.ExerciseLog)
          .WithMany(p => p.ExerciseMetrics) // Ensure ExerciseLog has a collection of ExerciseMetric
          .HasForeignKey(d => d.ExerciseLogID);

    entity.HasOne(d => d.Metric)
          .WithMany(p => p.ExerciseMetrics)
          .HasForeignKey(d => d.MetricID);
});


    }
}

